---
include:
  - docassemble.AssemblyLine:assembly_line.yml
  - docassemble.MassAccess:massaccess.yml
---
metadata:
  title: >-
    Acknowledgement of Satisfaction of Judgment
  short title: >-
    Satisfaction of Judgment
  description: |-
    This interview helps a plaintiff landlord in Massachusetts file an Acknowledgement of Satisfaction of Judgment.
  can_I_use_this_form: |
    If you are a Massachusetts landlord who filed a case against a former tenant and received a judgment for their nonpayment of rent, you can use this form to let the court know that the tenant has since repaid the rent they owed.
  before_you_start: |
    Before you get started, you will need to know:

    - The court where the rent judgment was issued  
    - The docket number of the rent judgment case  
    - The date when the court issued the rent judgment  

  maturity: production
  estimated_completion_minutes: 15
  estimated_completion_delta: 5
  LIST_topics: 
    - "HO-00-00-00-00"
    - "HO-02-00-00-00"
    - "HO-06-00-00-00"
  tags:
    - "HO-00-00-00-00"
    - "HO-02-00-00-00"
    - "HO-06-00-00-00"
  authors:
    - Nicole Dimitri
  original_form: []
  original_form_published_on: ""
  allowed_courts: 
    - "Boston Municipal Court"
    - "District Court"
    - "Housing Court"
  typical_role: "plaintiff"
  al_weaver_version: "1.11.0"
  generated_on: ""
  languages:
    - en
  jurisdiction: NAM-US-US+MA
  review_date: 2025-02-18
  form_titles:
    - Satisfaction of Judgment
  form_numbers: []
---
code: |
  # Default country and state settings
  AL_DEFAULT_COUNTRY = "US"
  AL_DEFAULT_STATE = "MA"
---
code: |
  github_repo_name = 'docassemble-SatisfactionofJudgment'
---
code: |
  interview_short_title = "Satisfaction of Judgment"
---
code: |
  al_form_type = "existing_case"
  al_default_role = "plaintiff"
  al_show_i_know_my_case_role = False
  al_intro_screen = False
  user_ask_role = "plaintiff"
  other_parties.there_are_any = True
---
id: satisfaction_intro
section: intro_section
mandatory: true
question: |
  File an Acknowledgment of Satisfaction of Judgment
subquestion: |
  This interview helps a plaintiff file an Acknowledgment of Satisfaction of Judgment in Massachusetts.

  **Before you begin, you will need to know:**

  - The court where the rent judgment was issued  
  - The docket number of the rent judgment case  
  - The date when the court issued the rent judgment  

  If you are represented by an attorney, they will need to sign their name and provide their BBO number.

  Click **Next** to begin the interview.
continue button field: satisfaction_intro_done
---
mandatory: true
code: |
  if not defined("satisfaction_intro_done"):
      satisfaction_intro_done
  interview_order_satisfaction
---
id: satisfaction_intro
section: intro_section
mandatory: true
question: |
  File an Acknowledgment of Satisfaction of Judgment
subquestion: |
  This interview helps a plaintiff file an Acknowledgment of Satisfaction of Judgment in Massachusetts.

  **Before you begin, you will need to know:**

  - The court where the rent judgment was issued  
  - The docket number of the rent judgment case  
  - The date when the court issued the rent judgment  

  If you are represented by an attorney, they will need to sign their name and provide their BBO number.

  Click **Next** to begin the interview.
continue button field: satisfaction_intro_done
---
mandatory: true
code: |
  plaintiffs_list = ", ".join([u.name.full() for u in users.complete_elements()]) if users.complete_elements() else ""
  defendants_list = ", ".join([o.name.full() for o in other_parties.complete_elements()]) if other_parties.complete_elements() else ""

  users.gather()
  other_parties.gather()
  trial_court.division
  docket_number
  judgment_date
  review_satisfaction_of_judgment_done

  interview_order_satisfaction = True  

  users.gather()
  if users.number_gathered() > 0:
      users[0].certify_plaintiff  
      if users[0].certify_plaintiff:  
          users[0].signature  
          users[0].signature_date = today()

  if not defined("attorneys.there_are_any"):
      attorneys.there_are_any = False

  if attorneys.there_are_any:
      attorneys.gather()
      if attorneys.number_gathered() > 0:
          if not defined("attorneys[0].certify_attorney"):
              attorneys[0].certify_attorney  

          if attorneys[0].certify_attorney:
              for i in range(len(attorneys.complete_elements())):
                  if not defined(f"attorneys[{i}].signature"):
                      attorneys[i].signature
                  attorneys[i].signature_date = today() if not defined(f"attorneys[{i}].signature_date") else attorneys[i].signature_date

  if all(defined(f"users[{i}].signature") for i in range(len(users.complete_elements()))) and \
     (not attorneys.there_are_any or (defined("attorneys[0].certify_attorney") and attorneys[0].certify_attorney and all(defined(f"attorneys[{i}].signature") for i in range(len(attorneys.complete_elements()))))):
      download_ready = True
---
objects:
  - plaintiffs: ALPeopleList.using(there_are_any=True, complete_attribute="name.first", gather_minimum=1)
  - defendants: ALPeopleList.using(
      there_are_any=True, 
      complete_attribute="name.first",
      role="defendant",
      ask_number=True,  
      target_number=1)
  - attorneys: ALPeopleList.using(complete_attribute="name.first")
  - trial_court: ALIndividual.using(there_are_any=True, complete_attribute="division")
---
sections:
  - intro_section: Introduction
  - case_information: Case information
  - review_satisfaction_of_judgment: Review your answers
  - plaintiff_certification: Plaintiff certification
  - attorney_certification: Attorney certification
  - sign_satisfaction_of_judgment: Sign your form
  - download_satisfaction_of_judgment: Download your form
---
id: plaintiff_name
section: case_information
question: |
  What is the plaintiff's name?
subquestion: |
  <span style="color: green;">You are the plaintiff if you filed a case against a former tenant and received a judgment for the rent they owed to you.</span> 
fields:
  - "First name": users[0].name.first
    required: true
  - "Last name": users[0].name.last
    required: true
---
id: additional_plaintiffs
section: case_information
question: |
  Are there any additional plaintiffs?
fields:
  - no label: users.there_is_another
    datatype: yesnoradio
---
id: defendant_name
section: case_information
question: |
  What is the defendantâ€™s name?
fields:
  - "First name": other_parties[0].name.first
    required: true
  - "Last name": other_parties[0].name.last
    required: true
---
id: additional_defendants
section: case_information
question: |
  Are there any additional defendants?
fields:
  - no label: other_parties.there_is_another
    datatype: yesnoradio
---
id: trial_court
section: case_information
question: |
  Where was the case filed?
subquestion: |
  Start typing the name of the court, then select from the list of Massachusetts courts.
fields:
  - "Court name": trial_court.division
    datatype: object
    object labeler: court_short_label
    choices: all_courts.filter_courts(["Housing Court", "Boston Municipal Court", "District Court"])
    required: true
---
id: docket_number
question: |
  What is the docket number of the case?
subquestion: |
  <span style="color: green;">The docket number is between 10 and 12 digits long and can be found on your court documents.</span>
fields:
  - "Docket number": docket_number
    required: true
validation code: |
  if not docket_number.strip().isdigit() or not (10 <= len(docket_number.strip()) <= 12):
      validation_error("The docket number must be between 10 and 12 digits long.")
---
id: judgment_date
question: |
  When was the rent judgment entered?
subquestion: |
  <span style="color: green;">Provide the date when the court entered its judgment that the defendant(s) owed you rent. You can find the judgment date on your court documents.</span>
fields:
  - "Judgment date": judgment_date
    datatype: date
    required: true
---
mandatory: True
question: |
  Is the plaintiff represented by an attorney?
fields:
  - "Is there an attorney?": attorneys.there_are_any
    datatype: radio 
    required: True
    choices:
      - "Yes, the plaintiff has an attorney": True  
      - "No, the plaintiff is self-represented": False
---
id: attorney_name
section: case_information
visible if: attorneys.there_are_any
question: |
  Enter the attorney's name and BBO number.
fields:
  - "First name": attorneys[0].name.first
    required: true
  - "Last name": attorneys[0].name.last
    required: true
  - "BBO Number": attorneys[0].bbo_number
    datatype: number
    required: true
validation code: |
  if not (100000 <= attorneys[0].bbo_number <= 999999):
      validation_error("The BBO number must be exactly 6 digits long.")
---
id: additional_attorneys
section: case_information
show if: attorneys.there_are_any
question: |
  Are there any additional attorneys representing the plaintiff?
subquestion: |
  <span style="color: green;">While it is uncommon to have more than one attorney representing you in a Satisfaction of Judgment, you may list up to two attorneys on your form.</span>
fields:
  - "Are there any other attorneys?": attorneys.there_is_another
    datatype: yesno
---
id: satisfaction_of_judgment_review_screen
event: review_satisfaction_of_judgment
mandatory: true
question: |
  Review your answers before certification
subquestion: |
  Click "Edit" if you need to make any changes.
review:
  - Edit: trial_court
    button: |
      **Trial court:**
      ${ trial_court.division }
  - Edit: docket_number
    button: |
      **Docket number:**
      ${ docket_number }
  - Edit: judgment_date
    button: |
      **Judgment date:**
      ${ judgment_date }
  - Edit: users.revisit
    button: |
      **${ noun_plural("Plaintiff", users.number_gathered()) }**
      
      % for item in users:
      * ${ item.name.full() }
      % endfor
  - Edit: other_parties.revisit
    button: |
      **${ noun_plural("Defendant", other_parties.number_gathered()) }**
      
      % for item in other_parties:
      * ${ item.name.full() }
      % endfor
  - Edit: attorneys.revisit
    button: |
      % if attorneys.there_are_any:
        % if users.number_gathered() == 1:
        **Plaintiff's ${ noun_plural("attorney", attorneys.number_gathered()) }**
        % else:
        **Plaintiffs' ${ noun_plural("attorney", attorneys.number_gathered()) }**
        % endif
      % else:
      **No attorneys**
      % endif
      
      % for item in attorneys:
      * ${ item.name.full() }
      % endfor
continue button field: review_satisfaction_of_judgment_done
---
continue button field: users.revisit
question: |
  Edit plaintiffs
subquestion: |
  ${ users.table }

  ${ users.add_action() }
---
table: users.table
rows: users
columns:
  - Name: |
      row_item.name.full() if defined("row_item.name.first") else ""
edit:
  - name.first
confirm: True
---
continue button field: attorneys.revisit
question: |
  Edit attorneys
subquestion: |
  ${ attorneys.table }

  ${ attorneys.add_action() }
---
table: attorneys.table
rows: attorneys
columns:
  - Name: |
      row_item.name.full() if defined("row_item.name.first") else ""
edit:
  - name.first
confirm: True
---
continue button field: other_parties.revisit
question: |
  Edit defendants
subquestion: |
  ${ other_parties.table }

  ${ other_parties.add_action() }
---
table: other_parties.table
rows: other_parties
columns:
  - Name: |
      row_item.name.full() if defined("row_item.name.first") else ""
edit:
  - name.first
confirm: True
---
table: attorneys.table
rows: attorneys
columns:
  - Name: |
      row_item.name.full() if defined("row_item.name.first") else ""
  - BBO number: | 
      row_item.bbo_number if defined("row_item.bbo_number") else ""
edit:
  - name.first
  - bbo_number
confirm: True
---
continue button field: other_parties.revisit
question: |
  Edit defendants
subquestion: |
  ${ other_parties.table }

  ${ other_parties.add_action() }
---
table: other_parties.table
rows: other_parties
columns:
  - Name: |
      row_item.name.full() if defined("row_item.name.first") else ""
edit:
  - name.first
confirm: True
---
mandatory: True
code: |
  users.gather()
  if users.number_gathered() > 0:
      users[0].certify_plaintiff  
      if users[0].certify_plaintiff:  
          users[0].signature  
          users[0].signature_date = today()

  attorneys.there_are_any = attorneys.there_are_any if defined("attorneys.there_are_any") else False

  if attorneys.there_are_any:
      attorneys.gather()
      if attorneys.number_gathered() > 0:
          for a in attorneys.complete_elements():
              a.signature
              a.signature_date = today()
---
mandatory: True
code: |
  if defined("users[0].signature") and (
      (not attorneys.there_are_any) or 
      (attorneys.there_are_any and defined("attorneys[0].certify_attorney") and attorneys[0].certify_attorney)
  ):
      download_ready
---
id: plaintiff_certification
section: plaintiff_certification
visible if: not attorneys.there_are_any 
question: |
  Plaintiff certification
subquestion: |
  **As the plaintiff in the rent judgment, you must certify that the judgment has been satisfied.**
fields:
  - "I certify that I am the plaintiff and that the judgment has been fully satisfied": users[0].certify_plaintiff
    datatype: yesno
    required: true
continue button field: plaintiff_certification_complete
---
id: attorney_certification
section: attorney_certification
mandatory: False
question: |
  Attorney certification
subquestion: |
  **As the plaintiff's attorney, you must certify that the judgment has been satisfied.**
visible if: attorneys.there_are_any and attorneys.number_gathered() > 0
fields:
  - "I certify that I am the plaintiff's attorney and that the judgment has been fully satisfied": attorneys[0].certify_attorney
    datatype: yesno
    required: True
continue button field: attorney_certification_complete
---
id: preview satisfaction_of_judgment
question: |
  Preview your form before you sign it
subquestion: |
  Here is a preview of the form you will sign on the next page.

  ${ al_court_bundle.as_pdf(key='preview') }

  Click the image to open it in a new tab. Click the "Edit answers" button to edit your answers.
  
  ${ action_button_html(url_action('review_satisfaction_of_judgment'), label='Edit answers', color='info') }

  Remember to come back to this window to continue and sign your form.

continue button field: satisfaction_of_judgment_preview_question
---
id: download_screen
mandatory: true
question: |
  Your form is ready to download.
subquestion: |

  You have successfully completed the **Acknowledgment of Satisfaction of Judgment**.

  **Next steps:**
  
  - Click **"Download"** to save your form.  
  - If you need to make changes, click **"Edit Answers"**.  
  - When you're done, click **"Exit"** to finish the interview.

  ${ action_button_html(url_action('review_satisfaction_of_judgment'), label='Edit answers', color='info') }

  ${ al_user_bundle.download_list_html() }

  ${ al_user_bundle.send_button_html(show_editable_checkbox=False) }
continue button field: interview_done
progress: 100
show if: download_ready
---
objects:
  - satisfaction_of_judgment_attachment: ALDocument.using(title="Satisfaction of Judgment", filename="satisfaction_of_judgment", enabled=True, has_addendum=False, )
  - al_user_bundle: ALDocumentBundle.using(elements=[satisfaction_of_judgment_attachment], filename="satisfaction_of_judgment", title="All forms to download for your records", enabled=True)
  - al_court_bundle: ALDocumentBundle.using(elements=[satisfaction_of_judgment_attachment],  filename="satisfaction_of_judgment", title="All forms to deliver to court", enabled=True)
---
attachment:
  name: Satisfaction of Judgment
  filename: satisfaction_of_judgment
  variable name: satisfaction_of_judgment_attachment[i]
  pdf template file: satisfaction_of_judgment.pdf
  fields:
  - "docket_number": ${ docket_number }
  - "trial_court": ${ trial_court.division }
  - "judgment_date": ${ judgment_date.format() }
  
  - "plaintiffs_list": ${ ", ".join([p.name.full() for p in users.complete_elements()]) }

  - "plaintiffs1_name_full": ${ users[0].name.full() if len(users.complete_elements()) > 0 else "" }
  - "plaintiffs1_signature": ${ users[0].signature if len(users.complete_elements()) > 0 else "" }
  - "plaintiffs1_signature_date": ${ users[0].signature_date.format() if len(users.complete_elements()) > 0 else "" }

  - "plaintiffs2_name_full": ${ users[1].name.full() if len(users.complete_elements()) > 1 else "" }
  - "plaintiffs2_signature": ${ users[1].signature if len(users.complete_elements()) > 1 else "" }
  - "plaintiffs2_signature_date": ${ users[1].signature_date.format() if len(users.complete_elements()) > 1 else "" }

  - "plaintiffs3_name_full": ${ users[2].name.full() if len(users.complete_elements()) > 2 else "" }
  - "plaintiffs3_signature": ${ users[2].signature if len(users.complete_elements()) > 2 else "" }
  - "plaintiffs3_signature_date": ${ users[2].signature_date.format() if len(users.complete_elements()) > 2 else "" }

  - "plaintiffs4_name_full": ${ users[3].name.full() if len(users.complete_elements()) > 3 else "" }
  - "plaintiffs4_signature": ${ users[3].signature if len(users.complete_elements()) > 3 else "" }
  - "plaintiffs4_signature_date": ${ users[3].signature_date.format() if len(users.complete_elements()) > 3 else "" }

  - "attorneys1_name_full": ${ attorneys[0].name.full() if len(attorneys.complete_elements()) > 0 else "" }
  - "attorneys1_signature": ${ attorneys[0].signature if len(attorneys.complete_elements()) > 0 else "" }
  - "attorneys1_signature_date": ${ attorneys[0].signature_date.format() if len(attorneys.complete_elements()) > 0 else "" }
  - "attorneys1_bbo_number": ${ attorneys[0].bbo_number if len(attorneys.complete_elements()) > 0 else "" }

  - "attorneys2_name_full": ${ attorneys[1].name.full() if len(attorneys.complete_elements()) > 1 else "" }
  - "attorneys2_signature": ${ attorneys[1].signature if len(attorneys.complete_elements()) > 1 else "" }
  - "attorneys2_signature_date": ${ attorneys[1].signature_date.format() if len(attorneys.complete_elements()) > 1 else "" }
  - "attorneys2_bbo_number": ${ attorneys[1].bbo_number if len(attorneys.complete_elements()) > 1 else "" }

  - "defendants_list": ${ ", ".join([d.name.full() for d in other_parties.complete_elements()]) }
  
  - "plaintiffs1_certify_plaintiff": ${ "Yes" if users[0].certify_plaintiff else "No" }
  - "attorneys1_certify_attorney": ${ "Yes" if attorneys[0].certify_attorney else "No" }
---