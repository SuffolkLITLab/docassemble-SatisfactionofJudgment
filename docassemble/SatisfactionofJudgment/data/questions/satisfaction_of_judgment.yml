---
include:
  - docassemble.AssemblyLine:assembly_line.yml
  - docassemble.MassAccess:massaccess.yml
---
metadata:
  title: >-
    Acknowledgement of Satisfaction of Judgment
  short title: >-
    Satisfaction of Judgment
  description: |-
    This interview helps a plaintiff landlord in Massachusetts file an Acknowledgement of Satisfaction of Judgment.
  can_I_use_this_form: |
    If you are a Massachusetts landlord who filed a case against a former tenant and received a judgment for their nonpayment of rent, you can use this form to let the court know that the tenant has since repaid the rent they owed.
  before_you_start: |
    Before you get started, you will need to know:

    - The court where the rent judgment was issued  
    - The docket number of the rent judgment case  
    - The date when the court issued the rent judgment  

  maturity: production
  estimated_completion_minutes: 15
  estimated_completion_delta: 5
  LIST_topics: 
    - "HO-00-00-00-00"
    - "HO-02-00-00-00"
    - "HO-06-00-00-00"
  tags:
    - "HO-00-00-00-00"
    - "HO-02-00-00-00"
    - "HO-06-00-00-00"
  authors:
    - Nicole Dimitri
  original_form: []
  original_form_published_on: ""
  allowed_courts: 
    - "Boston Municipal Court"
    - "District Court"
    - "Housing Court"
  typical_role: "plaintiff"
  al_weaver_version: "1.11.0"
  generated_on: "2025-02-14"
  languages:
    - en
  jurisdiction: NAM-US-US+MA
  review_date: 2025-02-14
  form_titles:
    - Satisfaction of Judgment
  form_numbers: []
---
code: |
  # Default country and state settings
  AL_DEFAULT_COUNTRY = "US"
  AL_DEFAULT_STATE = "MA"
---
code: |
  github_repo_name = 'docassemble-SatisfactionofJudgment'
---
code: |
  interview_short_title = "Satisfaction of Judgment"
---
code: |
  al_form_type = "existing_case"
---
id: satisfaction_of_judgment_intro
section: intro_section
mandatory: true
question: |
  File an Acknowledgment of Satisfaction of Judgment
subquestion: |
  This interview helps a plaintiff file an Acknowledgment of Satisfaction of Judgment in Massachusetts.

  **Before you begin, you will need to know:**

  - The court where the rent judgment was issued  
  - The docket number of the rent judgment case  
  - The date when the court issued the rent judgment  

  If you are represented by an attorney, they will need to sign their name and provide their BBO number.

  Click **Next** to begin the interview.
continue button field: satisfaction_of_judgment_intro_done
---
mandatory: true
code: |
  plaintiffs_list = ", ".join([p.name.full() for p in plaintiffs.complete_elements()]) if plaintiffs.complete_elements() else ""
  defendants_list = ", ".join([d.name.full() for d in defendants.complete_elements()]) if defendants.complete_elements() else ""

  al_intro_screen
  plaintiffs.gather()
  defendants.gather()
  trial_court.division
  docket_number
  judgment_date
  review_satisfaction_of_judgment_done

  # Ensure we capture whether the plaintiff has an attorney
  if not defined("plaintiff_represented"):
      plaintiff_represented

  # If represented, ensure we gather attorneys safely
  if plaintiff_represented == "Yes":
      attorneys.gather()
      
      if attorneys.complete_elements():  # Only process attorneys if they exist
          attorneys[0].certify_attorney = True  # Ensure at least one attorney certifies
          if not defined("attorneys[0].signature"):
              attorneys[0].signature
          attorneys[0].signature_date = today() if not defined("attorneys[0].signature_date") else attorneys[0].signature_date
          attorneys[0].bbo_number
      else:
          attorneys.there_are_any = False  # No attorneys to collect

  else:
      attorneys.there_are_any = False  # If self-represented, skip attorneys

  # Ensure first plaintiff certifies
  if plaintiffs.complete_elements():  
      plaintiffs[0].certify_plaintiff = True

  # Gather signatures for all plaintiffs safely
  for i in range(len(plaintiffs.complete_elements())):
      if not defined(f"plaintiffs[{i}].signature"):
          plaintiffs[i].signature
      plaintiffs[i].signature_date = today() if not defined(f"plaintiffs[{i}].signature_date") else plaintiffs[i].signature_date

  # Gather signatures for all attorneys (only if represented)
  if plaintiff_represented == "Yes" and attorneys.complete_elements():
      for i in range(len(attorneys.complete_elements())):
          if not defined(f"attorneys[{i}].signature"):
              attorneys[i].signature
          attorneys[i].signature_date = today() if not defined(f"attorneys[{i}].signature_date") else attorneys[i].signature_date

  # Ensure all required signatures before allowing download
  total_signatures_needed = len(plaintiffs.complete_elements()) + (len(attorneys.complete_elements()) if plaintiff_represented == "Yes" else 0)
  total_signatures_collected = sum(1 for i in range(len(plaintiffs.complete_elements())) if defined(f"plaintiffs[{i}].signature"))
  total_signatures_collected += sum(1 for i in range(len(attorneys.complete_elements())) if plaintiff_represented == "Yes" and defined(f"attorneys[{i}].signature"))

  if total_signatures_collected >= total_signatures_needed:
      download_ready = True
      satisfaction_of_judgment_download  # Ensure transition to the final screen
---
objects:
  - plaintiffs: ALPeopleList.using(there_are_any=True, complete_attribute="name.first", gather_minimum=1)
  - defendants: ALPeopleList.using(there_are_any=True, complete_attribute="name.first", gather_minimum=1)
  - attorneys: ALPeopleList.using(there_are_any=True, complete_attribute="name.first", gather_minimum=1)
  - trial_court: ALIndividual.using(there_are_any=True, complete_attribute="division")
---
sections:
  - intro_section: Introduction
  - case_information: Case information
  - review_satisfaction_of_judgment: Review your answers
  - plaintiff_certification: Plaintiff certification
  - attorney_certification: Attorney certification
  - sign_satisfaction_of_judgment: Sign your form
  - download_satisfaction_of_judgment: Download your form
---
id: plaintiffs_name
section: case_information
question: |
  What is the plaintiff’s name in your case?
fields:
  - "First name": plaintiffs[0].name.first
    required: true
  - "Last name": plaintiffs[0].name.last
    required: true
---
id: plaintiffs.there_are_any
section: case_information
question: |
  Are there any additional plaintiffs in your case?
subquestion: |
  If there are multiple plaintiffs, list their names here.
yesno: plaintiffs.there_are_any
depends on: plaintiffs_gathered
---
id: defendants_name
section: case_information
question: |
  What is the defendant’s name in your case?
fields:
  - "First name": defendants[0].name.first
    required: true
  - "Last name": defendants[0].name.last
    required: true
---
id: defendants.there_are_any
section: case_information
question: |
  Are there any additional defendants in the case?
subquestion: |
  If there are multiple defendants, list their names here.
yesno: defendants.there_are_any
depends on: defendants_gathered
---
id: trial_court.division
section: case_information
mandatory: true
question: |
  Where did you file your case?
subquestion: |
  <span style="color: green;">Choose the court where you filed the case for rent owed. If you are unsure of which court to select, check your court documents.</span>
fields:
  - "Court name": trial_court.division
    datatype: choice
    choices:
      - "Boston Municipal Court - Central Division"
      - "Boston Municipal Court - Brighton Division"
      - "Boston Municipal Court - Charlestown Division"
      - "Boston Municipal Court - Dorchester Division"
      - "Boston Municipal Court - East Boston Division"
      - "Boston Municipal Court - Roxbury Division"
      - "Boston Municipal Court - South Boston Division"
      - "Boston Municipal Court - West Roxbury Division"
      - "Trial Court - District Court - Central Division"
      - "Trial Court - District Court - Eastern Division"
      - "Trial Court - District Court - Northern Division"
      - "Trial Court - District Court - Southern Division"
      - "Trial Court - District Court - Western Division"
      - "Trial Court - Housing Court - Metro South Division"
      - "Trial Court - Housing Court - Metro West Division"
      - "Trial Court - Housing Court - Northeast Division"
      - "Trial Court - Housing Court - Southeast Division"
      - "Trial Court - Housing Court - Western Division"
    required: true
---
id: docket_number
section: case_information
mandatory: true
question: |
  What is the docket number of your case?
subquestion: |
  <span style="color: green;">The docket number is between 10 and 12 digits long and can be found on your court documents.</span>
fields:
  - "Docket number": docket_number
    required: true
validation code: |
  if not docket_number.strip().isdigit() or not (10 <= len(docket_number.strip()) <= 12):
      validation_error("The docket number must be between 10 and 12 digits long.")
---
id: judgment_date
section: case_information
mandatory: true
question: |
  When was judgment entered in your case?
subquestion: |
  <span style="color: green;">Provide the date when the court entered its judgment that the defendant(s) owed you rent. You can find the judgment date on your court documents.</span>
fields:
  - "Judgment date": judgment_date
    datatype: date
    required: true
---
id: satisfaction_of_judgment_review_screen
event: review_satisfaction_of_judgment
mandatory: true
question: |
  Review your answers before certification
subquestion: |
  Click "Edit" if you need to make any changes.  
review:
  - Edit: docket_number
    button: "**Docket number**: ${ docket_number }"
  - Edit: trial_court.division
    button: "**Trial court**: ${ trial_court.division if defined('trial_court.division') else '' }"
  - Edit: judgment_date
    button: "**Judgment date**: ${ judgment_date }"
  - Edit: plaintiffs[0].name.first
    button: "**First plaintiff**: ${ plaintiffs[0].name.full() }"
  - Edit: plaintiffs.there_are_any
    button: "**Additional plaintiffs**: ${ 'Yes' if plaintiffs.there_are_any and len(plaintiffs.complete_elements()) > 1 else 'No' }"
  - Edit: defendants[0].name.first
    button: "**First defendant**: ${ defendants[0].name.full() }"
  - Edit: defendants.there_are_any
    button: "**Additional defendants**: ${ 'Yes' if defendants.there_are_any and len(defendants.complete_elements()) > 1 else 'No' }"
continue button field: review_satisfaction_of_judgment_done
---
id: plaintiff_represented
section: attorney_certification
question: |
  Is the plaintiff represented by an attorney?
fields:
  - "Is there an attorney?": plaintiff_represented
    datatype: radio
    choices:
      - "Yes, the plaintiff has an attorney": "Yes"
      - "No, the plaintiff is self-represented": "No"
depends on: review_satisfaction_of_judgment_done
mandatory: true
---
id: attorney_name_entry
section: attorney_certification
visible if: plaintiff_represented == "Yes"
question: |
  Enter the attorney's name and BBO number.
fields:
  - "First name": attorneys[0].name.first
    required: true
  - "Last name": attorneys[0].name.last
    required: true
  - "BBO Number": attorneys[0].bbo_number
    datatype: number
    required: true
continue button field: attorney_name_complete
---
id: other_attorneys
section: attorney_certification
question: |
  Are there additional attorneys representing the plaintiff?
subquestion: |
  <span style="color: green;">While it is uncommon to have more than one attorney representing you in a Satisfaction of Judgment, you may list up to two attorneys on your form.</span>
fields:
  - "Are there any other attorneys?": attorneys.there_are_any
    datatype: yesno
visible if: attorneys[0].name.first
---
id: plaintiff_certification
section: plaintiff_certification
visible if: plaintiff_represented == "No"
mandatory: plaintiff_represented == "No"
question: |
  Plaintiff certification
subquestion: |
  **As a self-represented plaintiff, you must certify that the judgment has been satisfied.**
fields:
  - "I certify that I am the plaintiff and that the judgment has been fully satisfied": plaintiffs[0].certify_plaintiff
    datatype: yesno
    required: true
continue button field: plaintiff_certification_complete
---
mandatory: True
code: |
  if plaintiff_represented == "No" and defined("plaintiffs[0].signature"):
      satisfaction_of_judgment_download
---
id: attorney_certification
section: attorney_certification
visible if: plaintiff_represented == "Yes"
mandatory: plaintiff_represented == "Yes" 
question: |
  Attorney certification
subquestion: |
  **As the plaintiff's attorney, you must certify that the judgment has been satisfied.**
fields:
  - "I certify that I am the plaintiff's attorney and that the judgment has been fully satisfied": attorneys[0].certify_attorney
    datatype: yesno
    required: true
continue button field: attorney_certification_complete
---
id: preview satisfaction_of_judgment
question: |
  Preview your form before you sign it
subquestion: |
  Here is a preview of the form you will sign on the next page.

  ${ al_court_bundle.as_pdf(key='preview') }

  Click the image to open it in a new tab. Click the "Edit answers" button to edit your answers.
  
  ${ action_button_html(url_action('review_satisfaction_of_judgment'), label='Edit answers', color='info') }

  Remember to come back to this window to continue and sign your form.

continue button field: satisfaction_of_judgment_preview_question
---
code: |
  signature_fields = ['plaintiffs[0].signature', 'plaintiffs[1].signature', 'plaintiffs[2].signature', 'plaintiffs[3].signature', 'attorneys[0].signature', 'attorneys[1].signature']
---
code: |
  [user.address.address for user in users.complete_elements()]
  addresses_to_search = [user.address for user in users.complete_elements()]
---
id: download satisfaction_of_judgment
event: satisfaction_of_judgment_download
question: |
  All done.
subquestion: |
  Your form is ready to download and deliver.
  
  View, download and send your form below. Click the "Edit answers" button to fix any mistakes.

  ${ action_button_html(url_action('review_satisfaction_of_judgment'), label='Edit answers', color='info') }
  
  ${ al_user_bundle.download_list_html() }
  
  ${ al_user_bundle.send_button_html(show_editable_checkbox=False) }

progress: 100
---
objects:
  - satisfaction_of_judgment_attachment: ALDocument.using(title="Satisfaction of Judgment", filename="satisfaction_of_judgment", enabled=True, has_addendum=False, )
  - al_user_bundle: ALDocumentBundle.using(elements=[satisfaction_of_judgment_attachment], filename="satisfaction_of_judgment", title="All forms to download for your records", enabled=True)
  - al_court_bundle: ALDocumentBundle.using(elements=[satisfaction_of_judgment_attachment],  filename="satisfaction_of_judgment", title="All forms to deliver to court", enabled=True)
---
attachment:
  name: Satisfaction of Judgment
  filename: satisfaction_of_judgment
  variable name: satisfaction_of_judgment_attachment[i]
  pdf template file: satisfaction_of_judgment.pdf
  fields:
  - "docket_number": ${ docket_number }
  - "trial_court_division": ${ trial_court.division }
  - "judgment_date": ${ judgment_date.format() }
  
  - "plaintiffs_list": ${ plaintiffs_list }
  - "defendants_list": ${ defendants_list }
  
  - "plaintiffs1_name_full": ${ plaintiffs[0].name.full() }
  - "plaintiffs1_signature": ${ plaintiffs[0].signature if defined("plaintiffs[0].signature") else "" }
  - "plaintiffs1_signature_date": ${ plaintiffs[0].signature_date.format() if defined("plaintiffs[0].signature_date") else "" }
  
  - "plaintiffs2_name_full": ${ plaintiffs[1].name.full() if defined("plaintiffs[1].name.full()") else "" }
  - "plaintiffs2_signature": ${ plaintiffs[1].signature if defined("plaintiffs[1].signature") else "" }
  - "plaintiffs2_signature_date": ${ plaintiffs[1].signature_date.format() if defined("plaintiffs[1].signature_date") else "" }
  
  - "plaintiffs3_name_full": ${ plaintiffs[2].name.full() if defined("plaintiffs[2].name.full()") else "" }
  - "plaintiffs3_signature": ${ plaintiffs[2].signature if defined("plaintiffs[2].signature") else "" }
  - "plaintiffs3_signature_date": ${ plaintiffs[2].signature_date.format() if defined("plaintiffs[2].signature_date") else "" }
  
  - "plaintiffs4_name_full": ${ plaintiffs[3].name.full() if defined("plaintiffs[3].name.full()") else "" }
  - "plaintiffs4_signature": ${ plaintiffs[3].signature if defined("plaintiffs[3].signature") else "" }
  - "plaintiffs4_signature_date": ${ plaintiffs[3].signature_date.format() if defined("plaintiffs[3].signature_date") else "" }
  
  - "attorneys1_name_full": ${ attorneys[0].name.full() if attorneys.there_are_any else "" }
  - "attorneys1_signature": ${ attorneys[0].signature if defined("attorneys[0].signature") else "" }
  - "attorneys1_signature_date": ${ attorneys[0].signature_date.format() if defined("attorneys[0].signature_date") else "" }
  - "attorneys1_bbo_number": ${ attorneys[0].bbo_number if defined("attorneys[0].bbo_number") else "" }
  
  - "attorneys2_name_full": ${ attorneys[1].name.full() if attorneys.there_are_any else "" }
  - "attorneys2_signature": ${ attorneys[1].signature if defined("attorneys[1].signature") else "" }
  - "attorneys2_signature_date": ${ attorneys[1].signature_date.format() if defined("attorneys[1].signature_date") else "" }
  - "attorneys2_bbo_number": ${ attorneys[1].bbo_number if defined("attorneys[1].bbo_number") else "" }
  
  - "plaintiffs1_certify_plaintiff": ${ "Yes" if plaintiffs[0].certify_plaintiff else "No" }
  - "attorneys1_certify_attorney": ${ "Yes" if attorneys[0].certify_attorney else "No" }
---